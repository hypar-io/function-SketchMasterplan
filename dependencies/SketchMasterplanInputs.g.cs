// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace SketchMasterplan
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class SketchMasterplanInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public SketchMasterplanInputs(IList<TypicalLevels> @typicalLevels, IList<Polygon> @footprints, IList<Vector3> @voids, Overrides @overrides, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SketchMasterplanInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @typicalLevels, @footprints, @voids, @overrides});
            }
        
            this.TypicalLevels = @typicalLevels;
            this.Footprints = @footprints;
            this.Voids = @voids;
            this.Overrides = @overrides ?? new Overrides();
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Typical Levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public IList<TypicalLevels> TypicalLevels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Footprints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Polygon> Footprints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Voids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Vector3> Voids { get; set; }
    
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overrides Overrides { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class TypicalLevels 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public TypicalLevels(string @name, double @height)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<TypicalLevels>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name, @height});
            }
        
            this.Name = @name;
            this.Height = @height;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The name of the level</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The floor-to-floor height of the level</summary>
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Height { get; set; } = 3.9624D;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Overrides 
    
    {
        public Overrides() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public Overrides(OverrideAdditions @additions, OverrideRemovals @removals, IList<MassesOverride> @masses, IList<MassingOverride> @massing, IList<VoidsOverride> @voids, IList<VoidGeometryOverride> @voidGeometry)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Overrides>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @additions, @removals, @masses, @massing, @voids, @voidGeometry});
            }
        
            this.Additions = @additions;
            this.Removals = @removals;
            this.Masses = @masses;
            this.Massing = @massing;
            this.Voids = @voids;
            this.VoidGeometry = @voidGeometry;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Additions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideAdditions Additions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Removals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideRemovals Removals { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Masses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassesOverride> Masses { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Massing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassingOverride> Massing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Voids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<VoidsOverride> Voids { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Void Geometry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<VoidGeometryOverride> VoidGeometry { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class OverrideAdditions 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public OverrideAdditions(IList<MassesOverrideAddition> @masses, IList<VoidGeometryOverrideAddition> @voidGeometry)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OverrideAdditions>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @masses, @voidGeometry});
            }
        
            this.Masses = @masses;
            this.VoidGeometry = @voidGeometry;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Masses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassesOverrideAddition> Masses { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Void Geometry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<VoidGeometryOverrideAddition> VoidGeometry { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class OverrideRemovals 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public OverrideRemovals(IList<MassesOverrideRemoval> @masses, IList<VoidGeometryOverrideRemoval> @voidGeometry)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OverrideRemovals>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @masses, @voidGeometry});
            }
        
            this.Masses = @masses;
            this.VoidGeometry = @voidGeometry;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Masses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassesOverrideRemoval> Masses { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Void Geometry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<VoidGeometryOverrideRemoval> VoidGeometry { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassesOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassesOverride(string @id, MassesIdentity @identity, MassesValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassesOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassesIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassesValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingOverride(string @id, MassingIdentity @identity, MassingValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidsOverride(string @id, VoidsIdentity @identity, VoidsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoidsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoidsValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidGeometryOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidGeometryOverride(string @id, VoidGeometryIdentity @identity, VoidGeometryValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidGeometryOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoidGeometryIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoidGeometryValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassesOverrideAddition 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassesOverrideAddition(string @id, MassesIdentity @identity, MassesOverrideAdditionValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassesOverrideAddition>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassesIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassesOverrideAdditionValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidGeometryOverrideAddition 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidGeometryOverrideAddition(string @id, VoidGeometryIdentity @identity, VoidGeometryOverrideAdditionValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidGeometryOverrideAddition>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoidGeometryIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoidGeometryOverrideAdditionValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassesOverrideRemoval 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassesOverrideRemoval(string @id, MassesIdentity @identity)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassesOverrideRemoval>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity});
            }
        
            this.Id = @id;
            this.Identity = @identity;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassesIdentity Identity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidGeometryOverrideRemoval 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidGeometryOverrideRemoval(string @id, VoidGeometryIdentity @identity)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidGeometryOverrideRemoval>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity});
            }
        
            this.Id = @id;
            this.Identity = @identity;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoidGeometryIdentity Identity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassesIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassesIdentity(Polygon @boundary)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassesIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @boundary});
            }
        
            this.Boundary = @boundary;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon Boundary { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassesValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassesValue(Polygon @footprintShape)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassesValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @footprintShape});
            }
        
            this.FootprintShape = @footprintShape;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Footprint Shape", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon FootprintShape { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingIdentity(Polygon @boundary)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @boundary});
            }
        
            this.Boundary = @boundary;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon Boundary { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingValue(string @massName, string @buildingName, int @numberOfLevels, int @startingLevel, IList<double> @buildingLevels)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @massName, @buildingName, @numberOfLevels, @startingLevel, @buildingLevels});
            }
        
            this.MassName = @massName;
            this.BuildingName = @buildingName;
            this.NumberOfLevels = @numberOfLevels;
            this.StartingLevel = @startingLevel;
            this.BuildingLevels = @buildingLevels;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Mass Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MassName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Building Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Number of Levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int NumberOfLevels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Starting Level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int StartingLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Building Levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<double> BuildingLevels { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidsIdentity(Vector3 @insertionPoint)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @insertionPoint});
            }
        
            this.InsertionPoint = @insertionPoint;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Insertion Point", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 InsertionPoint { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidsValue(int @startingLevel, int @lastLevel)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @startingLevel, @lastLevel});
            }
        
            this.StartingLevel = @startingLevel;
            this.LastLevel = @lastLevel;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Starting Level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int StartingLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Last Level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int LastLevel { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidGeometryIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidGeometryIdentity(Vector3 @insertionPoint)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidGeometryIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @insertionPoint});
            }
        
            this.InsertionPoint = @insertionPoint;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Insertion Point", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 InsertionPoint { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidGeometryValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidGeometryValue(Polygon @boundary)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidGeometryValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @boundary});
            }
        
            this.Boundary = @boundary;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon Boundary { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassesOverrideAdditionValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassesOverrideAdditionValue(Polygon @footprintShape)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassesOverrideAdditionValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @footprintShape});
            }
        
            this.FootprintShape = @footprintShape;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Footprint Shape", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon FootprintShape { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class VoidGeometryOverrideAdditionValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public VoidGeometryOverrideAdditionValue(Polygon @boundary)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<VoidGeometryOverrideAdditionValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @boundary});
            }
        
            this.Boundary = @boundary;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon Boundary { get; set; }
    
    
    }
}